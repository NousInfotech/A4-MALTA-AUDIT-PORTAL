'use client'; // Required for Next.js App Router to specify client component

import React, { useState, useEffect } from 'react';

// Shadcn UI components
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button'; // Assuming you have this
import { Input } from '@/components/ui/input'; // For RatioTable, but useful to list
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; // For RatioTable
import { Textarea } from '@/components/ui/textarea'; // For RatioTable and Conclusion
import { Badge } from '@/components/ui/badge'; // For RatioTable
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'; // For RatioTable

// Lucide React icons
import { LineChart, Plus, Trash, History, CheckCircle, TriangleAlert, HelpCircle, ChevronDown } from 'lucide-react';

// Import child components
import { RatioTable } from './RatioTable';
import { ConclusionNarrative } from './ConclusionNarrative';

// --- Ratio Interface for Type Safety ---
export interface Ratio {
  id: string; // Unique ID for each row, generated by crypto.randomUUID()
  name: string; // e.g., Gross Profit %
  formulaType: 'predefined' | 'custom'; // Defines which formula inputs are active
  predefinedFormula?: string; // e.g., 'grossProfit', 'receivablesDays' - used if formulaType is 'predefined'
  numerator?: string; // Used if formulaType is 'custom'
  denominator?: string; // Used if formulaType is 'custom'
  priorPeriodValue: string; // User input for prior period
  currentPeriodValue: string; // Auto-calculated or overridden user input for current period
  comments: string; // Auditor's narrative
  status: 'Explained' | 'Unexplained' | 'Needs Follow-up'; // Dropdown selection
  commentHistory?: { timestamp: string; content: string }[]; // Optional: for version history feature
}

// --- Helper to create a new, empty ratio object ---
const createEmptyRatio = (): Ratio => ({
  id: crypto.randomUUID(), // Generates a cryptographically strong unique ID
  name: '',
  formulaType: 'predefined',
  predefinedFormula: '',
  numerator: '',
  denominator: '',
  priorPeriodValue: '',
  currentPeriodValue: '',
  comments: '',
  status: 'Explained',
  commentHistory: [],
});

// --- Main AnalyticalReviewSection Component ---
export const AnalyticalReviewSection: React.FC = () => {
  // State for managing all ratio rows
  // Initialize with one empty ratio row for immediate interaction
  const [ratios, setRatios] = useState<Ratio[]>([createEmptyRatio()]);

  // State for managing the conclusion narrative
  const [conclusion, setConclusion] = useState<string>('');

  // State to control if the conclusion narrative is enabled
  const [isConclusionEnabled, setIsConclusionEnabled] = useState<boolean>(false);

  // Effect hook to determine when the conclusion narrative should be enabled
  useEffect(() => {
    // The conclusion is enabled if there's at least one ratio
    // that has a name and at least its formula defined (either predefined or custom fields).
    const hasAnyMeaningfulRatio = ratios.some(
      (ratio) =>
        ratio.name.trim() !== '' && // Ratio has a non-empty name
        (
          (ratio.formulaType === 'predefined' && ratio.predefinedFormula !== '') || // OR predefined formula is selected
          (ratio.formulaType === 'custom' && ratio.numerator?.trim() !== '' && ratio.denominator?.trim() !== '') // OR custom formula has both numerator/denominator
        )
    );
    setIsConclusionEnabled(hasAnyMeaningfulRatio);
  }, [ratios]); // Re-run this effect whenever the 'ratios' state changes

  // Handler to add a new empty ratio row to the table
  const handleAddRatio = () => {
    setRatios((prevRatios) => [...prevRatios, createEmptyRatio()]);
  };

  // Handler to update an existing ratio row
  const handleRatioChange = (updatedRatio: Ratio) => {
    setRatios((prevRatios) =>
      prevRatios.map((ratio) => (ratio.id === updatedRatio.id ? updatedRatio : ratio))
    );
  };

  // Handler to delete a ratio row by its ID
  const handleDeleteRatio = (id: string) => {
    setRatios((prevRatios) => prevRatios.filter((ratio) => ratio.id !== id));
  };

  return (
    <div className="container mx-auto px-4 py-8 md:py-12">
      <Card className="shadow-lg rounded-xl overflow-hidden bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800">
        <CardHeader className="bg-gray-50 dark:bg-gray-800 p-6 border-b border-gray-200 dark:border-gray-700">
          <CardTitle className="flex items-center gap-3 text-2xl font-bold text-gray-900 dark:text-gray-50">
            <LineChart className="w-7 h-7 text-primary dark:text-primary-foreground" aria-label="Line Chart Icon" />
            Final Analytical Review & Audit Report
          </CardTitle>
          <CardDescription className="text-gray-600 dark:text-gray-400 mt-2 text-md">
            Interactive tool to perform analytical reviews, track ratio movements, and document audit observations.
          </CardDescription>
        </CardHeader>

        <CardContent className="p-6 space-y-8">
          {/* Ratio Table Component */}
          <RatioTable
            ratios={ratios}
            onRatioChange={handleRatioChange}
            onDeleteRatio={handleDeleteRatio}
          />

          {/* Button to add new ratio rows */}
          <Button onClick={handleAddRatio} className="w-full sm:w-auto mt-4">
            <Plus className="mr-2 h-4 w-4" aria-label="Add Icon" /> Add New Ratio
          </Button>

          {/* Conclusion Narrative Component */}
          <ConclusionNarrative
            conclusion={conclusion}
            setConclusion={setConclusion}
            isEnabled={isConclusionEnabled} // Pass the state to enable/disable
          />
        </CardContent>

        <CardFooter className="p-6 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 text-sm text-gray-500 dark:text-gray-400">
          Audit Report Generator v1.0 &copy; {new Date().getFullYear()}
        </CardFooter>
      </Card>
    </div>
  );
};